// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  username       String?   @unique
  password       String?
  name           String?
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           UserRole  @default(USER)
  status         UserStatus @default(ACTIVE)
  socialLogins   SocialLogin[]
  sessions       Session[]
  quizResults    UserQuizResult[]
  topicwiseQuizResults TopicwiseQuizResult[]
  feedbacks      Feedback[]
}

model SocialLogin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  provider     Provider
  providerId   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider, providerId])
  @@unique([provider, userId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum Provider {
  GOOGLE
  GITHUB
  LOCAL
}

model MCQ {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  key           String   @unique
  questions     Question[]
  quizResults   UserQuizResult[]
  @@map("Mcqs")
}

type Question {
  question        String
  options         Options
  correct_answer  String
  question_id     Int
  source_file     String?
}

type Options {
  A String
  B String
  C String
  D String
}

model UserQuizResult {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId
  mcq                MCQ      @relation(fields: [mcqId], references: [id], onDelete: Cascade)
  mcqId              String   @db.ObjectId
  totalTimeTaken     Int
  correctAnswerCount Int
  wrongAnswerCount   Int
  attemptCount       Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([mcqId])
  @@map("UserQuizResults")
}

model TopicwiseMcqs {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  key       String               @unique
  questions Question[]
  quizResults TopicwiseQuizResult[]
  
  @@map("Topicwise_Mcqs")
}

model TopicwiseQuizResult {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId
  topicwiseMcq       TopicwiseMcqs @relation(fields: [topicwiseMcqId], references: [id], onDelete: Cascade)
  topicwiseMcqId     String   @db.ObjectId
  totalTimeTaken     Int
  correctAnswerCount Int
  wrongAnswerCount   Int
  attemptCount       Int
  questionDetails    Json?    // Store detailed information about each question attempt
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([topicwiseMcqId])
  @@map("TopicwiseQuizResults")
}

enum FeedbackType {
  HELPFUL
  NEEDS_IMPROVEMENT
}

model Feedback {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.ObjectId
  topic       String       // The topic/page the feedback is for
  type        FeedbackType // Whether it was helpful or needs improvement
  comment     String?      // Optional feedback text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([topic])
  @@map("Feedbacks")
}
